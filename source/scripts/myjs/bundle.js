/// <reference path="./defs/three/three.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var GameObjects;
(function (GameObjects) {
    var Game = (function () {
        function Game(CANNON, THREE) {
            this.CANNON = CANNON;
            this.THREE = THREE;
            //init renderer
            this.renderer = new THREE.WebGLRenderer();
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(this.renderer.domElement);
            //init physics world
            this.world = new CANNON.World();
            this.world.gravity.set(0, 0, -9.82); // m/sÂ²
            console.log("new world created");
            console.log("new Game created");
        }
        Game.prototype.render = function (scene) {
            this.renderer.render(scene.threeScene, scene.camera);
        };
        return Game;
    })();
    GameObjects.Game = Game;
    //an item in the game.  meant to be a superclass for actual game objects
    var GameItem = (function () {
        function GameItem() {
            this.gameObjectID = GameItem.gameItemID;
            //store this gameObject in an array for later
            GameItem.gameItems[this.gameObjectID] = this;
            console.log("Object " + GameItem.gameItemID + " created.");
            GameItem.gameItemID++;
        }
        GameItem.prototype.getItem = function (id) {
            return GameItem.gameItems[id];
        };
        GameItem.gameItemID = 0;
        GameItem.gameItems = [];
        return GameItem;
    })();
    GameObjects.GameItem = GameItem;
    var Box = (function (_super) {
        __extends(Box, _super);
        function Box() {
            _super.call(this);
            this.geometry = new THREE.BoxGeometry(1, 1, 1);
            ;
            this.material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
            ;
            this.mesh = new THREE.Mesh(this.geometry, this.material);
            ;
        }
        Box.prototype.rotate = function (x, y, z) {
            if (x)
                this.mesh.rotation.x += x;
            if (y)
                this.mesh.rotation.y += y;
            if (z)
                this.mesh.rotation.z += z;
        };
        return Box;
    })(GameItem);
    GameObjects.Box = Box;
})(GameObjects || (GameObjects = {}));

/// <reference path="./defs/underscore/underscore.d.ts" />
/// <reference path="./defs/jquery/jquery.d.ts" />
/// <reference path="./defs/three/three.d.ts" />
/// <reference path="./gameObjects.ts" />
var $ = require("jquery");
var THREE = require("three");
var CANNON = require("cannon");
var game;
$(function () {
    console.log("jquery & underscore loaded");
    createGame();
});
function createGame() {
    game = new GameObjects.Game(CANNON, THREE);
    var scene = new GameScenes.Scene(THREE);
    var box = new GameObjects.Box();
    scene.add(box);
    scene.positionCamera(null, null, 5);
    var render = function () {
        requestAnimationFrame(render);
        box.rotate(.1, null, null);
        box.rotate(null, .1, null);
        game.render(scene);
    };
    render();
}

/// <reference path="./defs/three/three.d.ts" />
var GameScenes;
(function (GameScenes) {
    //a game scene.  It will have the camera, lights, and scene graph
    var Scene = (function () {
        function Scene(THREE, name) {
            this.lights = [];
            this.THREE = THREE;
            if (name) {
                this.name = name;
            }
            this.threeScene = new THREE.Scene();
            this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            console.log("scene " + Scene.sceneID + " created");
            Scene.scenes.push(this);
            Scene.sceneID++;
        }
        Scene.prototype.add = function (item) {
            this.threeScene.add(item.mesh);
        };
        Scene.prototype.positionCamera = function (x, y, z) {
            if (x)
                this.camera.position.x = x;
            if (y)
                this.camera.position.y = y;
            if (z)
                this.camera.position.z = z;
        };
        Scene.sceneID = 0;
        Scene.scenes = [];
        return Scene;
    })();
    GameScenes.Scene = Scene;
})(GameScenes || (GameScenes = {}));

//# sourceMappingURL=data:application/json;base64,
